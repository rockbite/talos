buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' } // snapshots
    }
    dependencies {

        classpath libs.javapoet
        classpath libs.libgdx
        classpath libs.libgdx.tools
        classpath libs.lombok
        classpath libs.grgit
    }
}

plugins {
    id 'java-library'
    alias(libs.plugins.lombok)
    alias(libs.plugins.grgit)
}



import com.badlogic.gdx.files.FileHandle
import com.badlogic.gdx.utils.XmlReader
import com.squareup.javapoet.ClassName
import com.squareup.javapoet.FieldSpec
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.MethodSpec
import com.squareup.javapoet.TypeSpec

import javax.lang.model.element.Modifier

dependencies {

    api libs.bongo.engine
    api project(":runtimes:talos-bongo")

    api libs.visui

    api libs.libgdx.freetype

    implementation libs.libgdx.tools


    implementation libs.string.similarity

    implementation libs.spine.libgdx

    implementation libs.snakeyaml

    implementation libs.tiny.gizmo
    implementation libs.spark

    implementation libs.javapoet

    implementation libs.classpathscanner

    compileOnly libs.lombok
    annotationProcessor libs.lombok
}


sourceSets.main.java.srcDirs = [ "src/" ]
sourceSets.main.resources.srcDirs = ["assets"]



def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

task generateCommandsEnum () {
    doFirst {
        TypeSpec.Builder builder = TypeSpec.classBuilder("Commands").addModifiers(Modifier.PUBLIC)
                .addJavadoc("This is a generated class. It shouldn't be modified by hand, as the changes would be " +
                "overridden.\n")
                .addJavadoc("To regenerate this class, call generateCommandsEnum task from Gradle.\n" +
                        "The XML file is located in editor/assets/commands.xml")
        def file = rootProject.file("editor/assets/commands.xml")
        XmlReader xmlReader = new XmlReader()
        XmlReader.Element root = xmlReader.parse(new FileHandle(file))

        TypeSpec.Builder packageEnumBuilder = TypeSpec.enumBuilder("CommandGroup").addModifiers(Modifier.PUBLIC)

        for (XmlReader.Element commandGroup : root.getChildrenByName("commandGroup")) {
            String packageName = commandGroup.getAttribute("package")
            packageEnumBuilder.addEnumConstant(packageName.toUpperCase())
        }

        TypeSpec builtEnum = packageEnumBuilder.build()

        TypeSpec.Builder enumBuilder = TypeSpec.enumBuilder("CommandType").addModifiers(Modifier.PUBLIC)
        enumBuilder.addField(FieldSpec.builder(String.class, "uniqueName", Modifier.PUBLIC, Modifier.FINAL).build())
        enumBuilder.addField(FieldSpec.builder(String.class, "name", Modifier.PUBLIC, Modifier.FINAL).build())
        enumBuilder.addField(FieldSpec.builder(String.class, "description", Modifier.PUBLIC, Modifier.FINAL).build())
        enumBuilder.addField(FieldSpec.builder(ClassName.bestGuess("com.talosvfx.talos.editor.notifications.commands.enums.Commands.CommandGroup"), "commandType", Modifier.PUBLIC, Modifier.FINAL).build())


        MethodSpec uniqueName = MethodSpec.constructorBuilder()
                .addParameter(String.class, "uniqueName")
        .addParameter(String.class, "name")
        .addParameter(String.class, "description")
        .addParameter(String.class, "commandType")
        .addStatement("this.uniqueName = uniqueName;\n" +
                "this.name = name;\n" +
                "this.description = description;\n" +
                "this.commandType = CommandGroup.valueOf(commandType);").build()
        enumBuilder.addMethod(uniqueName)

        for (XmlReader.Element commandGroup : root.getChildrenByName("commandGroup")) {
            String packageName = commandGroup.getAttribute("package")
            for (XmlReader.Element command : commandGroup.getChildrenByName("command")) {
                enumBuilder.addEnumConstant(command.getAttribute("name").replaceAll(" ", "_").toUpperCase(),
                        TypeSpec.anonymousClassBuilder("\$S, \$S, \$S, \$S", command.getAttribute("uniqueName"),
                                command.getAttribute("name"), command.getAttribute("description"), packageName.toUpperCase()).build())
            }
        }

        builder.addType(builtEnum).addType(enumBuilder.build())

        TypeSpec clazzBuild = builder.build();
        final JavaFile.Builder fileBuilder = JavaFile.builder("com.talosvfx.talos.editor.notifications.commands.enums", clazzBuild);
        JavaFile javaFile = fileBuilder.build()
        def destination = new File("$projectDir/src/")
        javaFile.writeTo(destination)
    }
}

task packageSources(type: Jar, dependsOn: classes) {
    from delombok
    from sourceSets.main.resources.srcDirs
    archiveClassifier = 'web'
}

configurations {
    web {
        canBeConsumed true
        canBeResolved false
        extendsFrom implementation, runtimeOnly
    }
}

artifacts {
    web(packageSources)
}

class TalosBuildInfo {
    def version
    def branch
    def commit
    def date

    TalosBuildInfo (def project, def grgit) {
        this.version = project.version
        this.commit = grgit.head().abbreviatedId
        this.branch = grgit.branch.current().getName()
        this.date = System.currentTimeMillis()
    }

    def print () {
        println "${this.versionString} ${this.commit} ${this.branch} ${this.date}"
    }
}

def getBuildInfo () {
    def buildInfo = new TalosBuildInfo(project, grgit)
    return buildInfo
}

import javax.lang.model.element.Modifier
import com.badlogic.gdx.Application
import com.badlogic.gdx.Gdx
import com.badlogic.gdx.utils.SharedLibraryLoader
import lombok.Getter

def addStringField (TypeSpec.Builder builder, String fieldName, String fieldValue) {
    FieldSpec fieldSpec = FieldSpec.builder(String.class, fieldName)
            .addModifiers(Modifier.PRIVATE, Modifier.FINAL, Modifier.STATIC)
            .addAnnotation(Getter.class)
            .initializer('$S', fieldValue)
            .build()

    builder.addField(fieldSpec)
}

def addIntField (TypeSpec.Builder builder, String fieldName, int fieldValue) {
    FieldSpec fieldSpec = FieldSpec.builder(int.class, fieldName)
            .addModifiers(Modifier.PRIVATE, Modifier.FINAL, Modifier.STATIC)
            .addAnnotation(Getter.class)
            .initializer('$L', fieldValue)
            .build()

    builder.addField(fieldSpec)
}

def addDateField (TypeSpec.Builder builder, String fieldName, long fieldValue) {
    FieldSpec fieldSpec = FieldSpec.builder(Date.class, fieldName)
            .addModifiers(Modifier.PRIVATE, Modifier.FINAL, Modifier.STATIC)
            .addAnnotation(Getter.class)
            .initializer('new Date($Ll)', fieldValue)
            .build()

    builder.addField(fieldSpec)
}

task generateBuildConfig {

    description 'Generate build config java file'

    outputs.upToDateWhen { false }

    doFirst {

        MethodSpec printHeader = MethodSpec.methodBuilder("printHeader")
                .addModifiers(Modifier.PRIVATE, Modifier.STATIC)
                .returns(void.class)
                .addStatement('$T.out.println($S)', System.class, "      ___           ___           ___       ___           ___     \n" +
                        "     /\\  \\         /\\  \\         /\\__\\     /\\  \\         /\\  \\    \n" +
                        "     \\:\\  \\       /::\\  \\       /:/  /    /::\\  \\       /::\\  \\   \n" +
                        "      \\:\\  \\     /:/\\:\\  \\     /:/  /    /:/\\:\\  \\     /:/\\ \\  \\  \n" +
                        "      /::\\  \\   /::\\~\\:\\  \\   /:/  /    /:/  \\:\\  \\   _\\:\\~\\ \\  \\ \n" +
                        "     /:/\\:\\__\\ /:/\\:\\ \\:\\__\\ /:/__/    /:/__/ \\:\\__\\ /\\ \\:\\ \\ \\__\n" +
                        "    /:/  \\/__/ \\/__\\:\\/:/  / \\:\\  \\    \\:\\  \\ /:/  / \\:\\ \\:\\ \\/__/\n" +
                        "   /:/  /           \\::/  /   \\:\\  \\    \\:\\  /:/  /   \\:\\ \\:\\__\\  \n" +
                        "   \\/__/            /:/  /     \\:\\  \\    \\:\\/:/  /     \\:\\/:/  /  \n" +
                        "                   /:/  /       \\:\\__\\    \\::/  /       \\::/  /   \n" +
                        "                   \\/__/         \\/__/     \\/__/         \\/__/    \n")
                .build()


        MethodSpec printDate = MethodSpec.methodBuilder("printDate")
                .addModifiers(Modifier.PRIVATE, Modifier.STATIC)
                .returns(void.class)
                .addStatement('$T cal = $T.getInstance()', Calendar.class, Calendar.class)
                .addStatement('$T.out.println($S + cal.getTime().toString())', System.class, "Current Date: ")
                .build()


        MethodSpec printVersion = MethodSpec.methodBuilder("printVersion")
                .addModifiers(Modifier.PRIVATE, Modifier.STATIC)
                .returns(void.class)
                .addStatement('$T.out.println($S + version)', System.class, "Runtime Version: ")
                .addStatement('$T.out.println($S + commit)', System.class, "Runtime commit: ")
                .addStatement('$T.out.println($S + branch)', System.class, "Runtime branch: ")
                .build()

        MethodSpec printSystemInfo = MethodSpec.methodBuilder("printSystemInfo")
                .addModifiers(Modifier.PRIVATE, Modifier.STATIC)
                .returns(void.class)
                .addStatement('$T is64Bit = $T.is64Bit', boolean.class, SharedLibraryLoader.class)
                .addStatement('$T applicationType = $T.app.getType()', Application.ApplicationType.class, Gdx.class)
                .addStatement('$T.out.println($S + applicationType.name())', System.class, "Platform: ")
                .addStatement('$T.out.println($S + is64Bit)', System.class, "Is 64 Bit: ")

                .addStatement('$T glVersion = $T.graphics.getGLVersion().getDebugVersionString()', String.class, Gdx.class)
                .addStatement('$T.out.println(glVersion)', System.class)
                .build()

        MethodSpec printAll = MethodSpec.methodBuilder("printAll")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .returns(void.class)
                .addStatement('printHeader()')
                .addStatement('printDate()')
                .addStatement('printVersion()')
                .addStatement('printSystemInfo()')
                .build()


        TypeSpec.Builder classSpecBuilder = TypeSpec.classBuilder("TALOS_BUILD")
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)


        //Meta

        def buildInfo = project(":editor").getBuildInfo()
        /*

            def versionString
            def commit
            def branch
            def date

         */

        addStringField(classSpecBuilder, "version", buildInfo.version as String)
        addStringField(classSpecBuilder, "commit", buildInfo.commit as String)
        addStringField(classSpecBuilder, "branch", buildInfo.branch as String)
        addDateField(classSpecBuilder, "buildDate", buildInfo.date as Long)

        classSpecBuilder
                .addMethod(printHeader)
                .addMethod(printDate)
                .addMethod(printVersion)
                .addMethod(printSystemInfo)
                .addMethod(printAll)

        TypeSpec classSpec = classSpecBuilder.build()

        JavaFile javaFile = JavaFile.builder("com.talosvfx.talos", classSpec).build()
        javaFile.writeTo(System.out)

        def file = new File("$projectDir/src/")
        javaFile.writeTo(file)
    }

}
